name: CI
on:
  pull_request_target:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      FILES_PATH_TO_TEST: /var/www/cdms/test/samples
    container:
      image: ruby:2.7.1
      options: --network-alias testHost
      volumes:
        - /var/www/cdms/test/samples:/var/www/cdms/test/samples
    services:
      db:
        image: postgres
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      selenium:
        image: selenium/standalone-chrome-debug:latest
        ports: ['4444:4444']
        volumes:
          - /var/www/cdms/test/samples:/var/www/cdms/test/samples
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Copy application env file
        run: |
          cp config/application.ci.yml config/application.yml

      - name: Install libpq-dev for postgres
        run: apt-get -yqq install libpq-dev

      - name: Cache bundle gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install bundle gems
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.3
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install yarn and dependencies
        run: |
          npm install -g yarn
          yarn install
          yarn install --check-files

      - name: Copy files to upload test
        run: |
          cp -r test/samples/* $FILES_PATH_TO_TEST

      - name: Run tests
        env:
          RAILS_ENV: test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          DATABASE_URL: postgres://postgres:@db
          SELENIUM_HOST: selenium
          SELENIUM_PORT: 4444
          TEST_APP_HOST: testHost
          COVERAGE: true
        run: |
          bundle exec rails webpacker:compile
          bundle exec rails db:prepare
          bundle exec rails test:system test
      - name: Send test report to codeclimate
        uses: paambaati/codeclimate-action@v2.6.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: echo 'send report to codeclimate'

  code_quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7'

      - name: Copy application env file
        run: cp config/application.ci.yml config/application.yml

      - name: Cache bundle gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install bundle gems
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.3
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install yarn and dependencies
        run: |
          npm install -g yarn
          yarn install
          yarn install --check-files

      - name: Check code quality
        run: |
          yarn run lint
          bundle exec rubocop --parallel
          bundle exec brakeman --ignore-config config/brakeman.ignore 
          bundle exec rubycritic --format console
